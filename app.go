package main

import (
	"archive/zip"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"runtime"
	"strings"
	"syscall"
	"time"
)

// Config —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
type Config struct {
	LogLevel string  `json:"logLevel"`
	Proxies  []Proxy `json:"proxies"`
}

// Proxy —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–∫—Å–∏
type Proxy struct {
	AppNames            []string `json:"appNames"`
	Socks5ProxyEndpoint string   `json:"socks5ProxyEndpoint"`
	Username            string   `json:"username"`
	Password            string   `json:"password"`
	SupportedProtocols  []string `json:"supportedProtocols"`
}

// App struct
type App struct {
	ctx    context.Context
	config *Config
}

// NewApp creates a new App application struct
func NewApp() *App {
	return &App{
		config: &Config{
			LogLevel: "Error",
			Proxies: []Proxy{
				{
					AppNames:            []string{},
					Socks5ProxyEndpoint: "",
					Username:            "",
					Password:            "",
					SupportedProtocols:  []string{"TCP", "UDP"},
				},
			},
		},
	}
}

// startup is called when the app starts. The context is saved
// so we can call the runtime methods
func (a *App) startup(ctx context.Context) {
	a.ctx = ctx

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	if err := a.EnsureConfigInExecutableDir(); err != nil {
		fmt.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: %v\n", err)
	}

	a.loadConfig()
}

// LoadConfig –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞
func (a *App) loadConfig() {
	configPath := a.GetConfigPath()
	if _, err := os.Stat(configPath); err == nil {
		data, err := ioutil.ReadFile(configPath)
		if err == nil {
			json.Unmarshal(data, &a.config)
		}
	}
}

// SaveConfig —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
func (a *App) SaveConfig(configData string) error {
	var config Config
	if err := json.Unmarshal([]byte(configData), &config); err != nil {
		return err
	}

	a.config = &config

	data, err := json.MarshalIndent(config, "", "  ")
	if err != nil {
		return err
	}

	configPath := a.GetConfigPath()
	return ioutil.WriteFile(configPath, data, 0644)
}

// GetConfig –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func (a *App) GetConfig() string {
	data, _ := json.Marshal(a.config)
	return string(data)
}

// GetCurrentDirectory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
func (a *App) GetCurrentDirectory() string {
	dir, _ := os.Getwd()
	return dir
}

// GetExecutableDirectory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
func (a *App) GetExecutableDirectory() string {
	executable, err := os.Executable()
	if err != nil {
		return a.GetCurrentDirectory()
	}
	return filepath.Dir(executable)
}

// EnsureConfigInExecutableDir –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
func (a *App) EnsureConfigInExecutableDir() error {
	execDir := a.GetExecutableDirectory()
	currentDir := a.GetCurrentDirectory()

	// –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞, –∫–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—É–¥–∞
	if execDir != currentDir {
		sourceConfig := filepath.Join(currentDir, "app-config.json")
		targetConfig := filepath.Join(execDir, "app-config.json")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		if _, err := os.Stat(sourceConfig); err == nil {
			// –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
			data, err := ioutil.ReadFile(sourceConfig)
			if err != nil {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v", err)
			}

			err = ioutil.WriteFile(targetConfig, data, 0644)
			if err != nil {
				return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v", err)
			}

			fmt.Printf("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: %s\n", execDir)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ProxiFyre.exe –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
		proxifyrePath := filepath.Join(execDir, "ProxiFyre.exe")
		if _, err := os.Stat(proxifyrePath); err == nil {
			fmt.Printf("‚úÖ ProxiFyre.exe –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: %s\n", execDir)
		} else {
			fmt.Printf("‚ö†Ô∏è ProxiFyre.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: %s\n", execDir)
		}
	}

	return nil
}

// GetConfigPath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (a *App) GetConfigPath() string {
	execDir := a.GetExecutableDirectory()
	return filepath.Join(execDir, "app-config.json")
}

// CheckProxiFyreExists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ ProxiFyre.exe
func (a *App) CheckProxiFyreExists() bool {
	_, err := os.Stat("ProxiFyre.exe")
	return err == nil
}

// RunProxiFyre –∑–∞–ø—É—Å–∫–∞–µ—Ç ProxiFyre.exe
func (a *App) RunProxiFyre() error {
	fmt.Printf("üîÑ –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è RunProxiFyre\n")

	currentDir := a.GetCurrentDirectory()
	fmt.Printf("üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: %s\n", currentDir)

	execDir := a.GetExecutableDirectory()
	fmt.Printf("üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: %s\n", execDir)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º ProxiFyre.exe –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	proxiFyrePathCurrent := filepath.Join(currentDir, "ProxiFyre.exe")
	fmt.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è—é ProxiFyre.exe –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %s\n", proxiFyrePathCurrent)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º ProxiFyre.exe –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
	proxiFyrePathExec := filepath.Join(execDir, "ProxiFyre.exe")
	fmt.Printf("üîç –ü—Ä–æ–≤–µ—Ä—è—é ProxiFyre.exe –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: %s\n", proxiFyrePathExec)

	var proxiFyrePath string

	if _, err := os.Stat(proxiFyrePathCurrent); err == nil {
		proxiFyrePath = proxiFyrePathCurrent
		fmt.Printf("‚úÖ ProxiFyre.exe –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏\n")
	} else if _, err := os.Stat(proxiFyrePathExec); err == nil {
		proxiFyrePath = proxiFyrePathExec
		fmt.Printf("‚úÖ ProxiFyre.exe –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞\n")
	} else {
		errorMsg := fmt.Sprintf("ProxiFyre.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (%s), –Ω–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (%s)", currentDir, execDir)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}

	fmt.Printf("üöÄ –ó–∞–ø—É—Å–∫–∞—é ProxiFyre: %s\n", proxiFyrePath)
	cmd := exec.Command(proxiFyrePath)
	cmd.Dir = filepath.Dir(proxiFyrePath)

	if runtime.GOOS == "windows" {
		cmd.SysProcAttr = &syscall.SysProcAttr{
			HideWindow: true,
		}
	}

	err := cmd.Start()
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ProxiFyre: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}

	fmt.Printf("‚úÖ ProxiFyre —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: %d)\n", cmd.Process.Pid)
	return nil
}

// StopProxiFyre –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ProxiFyre.exe
func (a *App) StopProxiFyre() error {
	fmt.Printf("üîÑ –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è StopProxiFyre\n")

	if runtime.GOOS == "windows" {
		fmt.Printf("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é ProxiFyre.exe —á–µ—Ä–µ–∑ taskkill\n")
		cmd := exec.Command("taskkill", "/F", "/IM", "ProxiFyre.exe")
		cmd.Dir = a.GetCurrentDirectory()

		err := cmd.Run()
		if err != nil {
			errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ProxiFyre: %v", err)
			fmt.Printf("‚ùå %s\n", errorMsg)
			return fmt.Errorf(errorMsg)
		}

		fmt.Printf("‚úÖ ProxiFyre —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n")
		return nil
	}

	errorMsg := "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Windows"
	fmt.Printf("‚ùå %s\n", errorMsg)
	return fmt.Errorf(errorMsg)
}

// DownloadProxiFyre —Å–∫–∞—á–∏–≤–∞–µ—Ç ProxiFyre
func (a *App) DownloadProxiFyre() error {
	fmt.Printf("üîÑ –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è DownloadProxiFyre\n")

	// GitHub API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä–µ–ª–∏–∑–µ
	apiURL := "https://api.github.com/repos/wiresock/proxifyre/releases/latest"
	fmt.Printf("üì° –ó–∞–ø—Ä–æ—Å –∫ GitHub API: %s\n", apiURL)

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å User-Agent
	client := &http.Client{
		Timeout: 30 * time.Second,
	}

	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ Python –≤–µ—Ä—Å–∏–∏
	req.Header.Set("User-Agent", "Mozilla/5.0")
	req.Header.Set("Accept", "application/vnd.github.v3+json")

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	resp, err := client.Do(req)
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		errorMsg := fmt.Sprintf("GitHub API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: %d", resp.StatusCode)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}

	// –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
	var releaseData map[string]interface{}
	if err := json.Unmarshal(body, &releaseData); err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ
	tagName, _ := releaseData["tag_name"].(string)
	fmt.Printf("üì¶ –ù–∞–π–¥–µ–Ω —Ä–µ–ª–∏–∑: %s\n", tagName)

	// –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—Ä—Ö–∏–≤ (–∫–∞–∫ –≤ Python –≤–µ—Ä—Å–∏–∏)
	var zipURL string
	if assets, ok := releaseData["assets"].([]interface{}); ok {
		for _, asset := range assets {
			if assetMap, ok := asset.(map[string]interface{}); ok {
				assetName, _ := assetMap["name"].(string)
				if strings.Contains(strings.ToLower(assetName), "x64-signed.zip") ||
					strings.Contains(strings.ToLower(assetName), "x86-signed.zip") {
					zipURL, _ = assetMap["browser_download_url"].(string)
					break
				}
			}
		}
	}

	if zipURL == "" {
		errorMsg := "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä—Ö–∏–≤ –≤ —Ä–µ–ª–∏–∑–µ"
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}

	fmt.Printf("üîó –°–∫–∞—á–∏–≤–∞—é: %s\n", zipURL)

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
	tempDir, err := os.MkdirTemp("", "proxifyre-download")
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}
	defer os.RemoveAll(tempDir) // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ

	zipPath := filepath.Join(tempDir, "proxifyre.zip")
	fmt.Printf("üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: %s\n", tempDir)

	// –°–∫–∞—á–∏–≤–∞–µ–º –∞—Ä—Ö–∏–≤
	fmt.Printf("üì• –°–∫–∞—á–∏–≤–∞—é –∞—Ä—Ö–∏–≤...\n")
	zipResp, err := http.Get(zipURL)
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}
	defer zipResp.Body.Close()

	zipFile, err := os.Create(zipPath)
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∞—Ä—Ö–∏–≤–∞: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}
	defer zipFile.Close()

	_, err = io.Copy(zipFile, zipResp.Body)
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}

	fmt.Printf("üì¶ –ê—Ä—Ö–∏–≤ —Å–∫–∞—á–∞–Ω, —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é...\n")

	// –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
	execDir := a.GetExecutableDirectory()
	fmt.Printf("üìÅ –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞—é –≤: %s\n", execDir)

	archive, err := zip.OpenReader(zipPath)
	if err != nil {
		errorMsg := fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∞—Ä—Ö–∏–≤–∞: %v", err)
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}
	defer archive.Close()

	// –°—á–∏—Ç–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	extractedFiles := 0
	for _, file := range archive.File {
		if file.FileInfo().IsDir() {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–∫–∞–∫ –≤ Python –≤–µ—Ä—Å–∏–∏)
		fileName := file.Name
		if strings.HasSuffix(strings.ToLower(fileName), ".exe") ||
			strings.HasSuffix(strings.ToLower(fileName), ".dll") ||
			strings.HasSuffix(strings.ToLower(fileName), ".txt") ||
			strings.HasSuffix(strings.ToLower(fileName), ".md") {

			// –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
			extractPath := filepath.Join(execDir, fileName)

			// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
			if err := os.MkdirAll(filepath.Dir(extractPath), 0755); err != nil {
				fmt.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è %s: %v\n", fileName, err)
				continue
			}

			// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
			dstFile, err := os.Create(extractPath)
			if err != nil {
				fmt.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª %s: %v\n", fileName, err)
				continue
			}

			// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞
			srcFile, err := file.Open()
			if err != nil {
				dstFile.Close()
				fmt.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –∏–∑ –∞—Ä—Ö–∏–≤–∞ %s: %v\n", fileName, err)
				continue
			}

			// –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
			_, err = io.Copy(dstFile, srcFile)
			srcFile.Close()
			dstFile.Close()

			if err != nil {
				fmt.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª %s: %v\n", fileName, err)
				continue
			}

			extractedFiles++
			fmt.Printf("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω —Ñ–∞–π–ª: %s\n", fileName)
		}
	}

	if extractedFiles > 0 {
		successMsg := fmt.Sprintf("–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω! –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: %d", extractedFiles)
		fmt.Printf("‚úÖ %s\n", successMsg)
		return nil
	} else {
		errorMsg := "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤"
		fmt.Printf("‚ùå %s\n", errorMsg)
		return fmt.Errorf(errorMsg)
	}
}

// InstallService —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ProxiFyre –∫–∞–∫ —Å–µ—Ä–≤–∏—Å
func (a *App) InstallService() error {
	if !a.CheckProxiFyreExists() {
		return fmt.Errorf("ProxiFyre.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
	}

	cmd := exec.Command("ProxiFyre.exe", "install")
	cmd.Dir = a.GetCurrentDirectory()
	return cmd.Run()
}

// UninstallService —É–¥–∞–ª—è–µ—Ç —Å–µ—Ä–≤–∏—Å ProxiFyre
func (a *App) UninstallService() error {
	if !a.CheckProxiFyreExists() {
		return fmt.Errorf("ProxiFyre.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
	}

	cmd := exec.Command("ProxiFyre.exe", "uninstall")
	cmd.Dir = a.GetCurrentDirectory()
	return cmd.Run()
}

// StartService –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–∏—Å ProxiFyre
func (a *App) StartService() error {
	if !a.CheckProxiFyreExists() {
		return fmt.Errorf("ProxiFyre.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
	}

	cmd := exec.Command("ProxiFyre.exe", "start")
	cmd.Dir = a.GetCurrentDirectory()
	return cmd.Run()
}

// StopService –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å ProxiFyre
func (a *App) StopService() error {
	if !a.CheckProxiFyreExists() {
		return fmt.Errorf("ProxiFyre.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
	}

	cmd := exec.Command("ProxiFyre.exe", "stop")
	cmd.Dir = a.GetCurrentDirectory()
	return cmd.Run()
}

// GetServiceStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
func (a *App) GetServiceStatus() string {
	if runtime.GOOS != "windows" {
		return "–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –¥–∞–Ω–Ω–æ–π –û–°"
	}

	cmd := exec.Command("sc", "query", "ProxiFyre")
	output, err := cmd.Output()
	if err != nil {
		return "–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
	}

	outputStr := string(output)
	if strings.Contains(outputStr, "RUNNING") {
		return "–ó–∞–ø—É—â–µ–Ω"
	} else if strings.Contains(outputStr, "STOPPED") {
		return "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
	}

	return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
}

// GetTimestamp –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
func (a *App) GetTimestamp() string {
	return time.Now().Format("15:04:05")
}
